package com.messi.languagehelper.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AI_ENTITY".
*/
public class AiEntityDao extends AbstractDao<AiEntity, Long> {

    public static final String TABLENAME = "AI_ENTITY";

    /**
     * Properties of entity AiEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Entity_type = new Property(1, String.class, "entity_type", false, "ENTITY_TYPE");
        public final static Property Content_type = new Property(2, String.class, "content_type", false, "CONTENT_TYPE");
        public final static Property Role = new Property(3, String.class, "role", false, "ROLE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Content_video_id = new Property(5, String.class, "content_video_id", false, "CONTENT_VIDEO_ID");
        public final static Property Content_video_path = new Property(6, String.class, "content_video_path", false, "CONTENT_VIDEO_PATH");
        public final static Property Img_url = new Property(7, String.class, "img_url", false, "IMG_URL");
        public final static Property Link = new Property(8, String.class, "link", false, "LINK");
        public final static Property Translate = new Property(9, String.class, "translate", false, "TRANSLATE");
        public final static Property Ai_type = new Property(10, String.class, "ai_type", false, "AI_TYPE");
        public final static Property Created = new Property(11, Long.class, "created", false, "CREATED");
        public final static Property Backup1 = new Property(12, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(13, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(14, String.class, "backup3", false, "BACKUP3");
        public final static Property Backup4 = new Property(15, String.class, "backup4", false, "BACKUP4");
        public final static Property Backup5 = new Property(16, String.class, "backup5", false, "BACKUP5");
        public final static Property Backup6 = new Property(17, String.class, "backup6", false, "BACKUP6");
        public final static Property Backup7 = new Property(18, String.class, "backup7", false, "BACKUP7");
    }


    public AiEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AiEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AI_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ENTITY_TYPE\" TEXT," + // 1: entity_type
                "\"CONTENT_TYPE\" TEXT," + // 2: content_type
                "\"ROLE\" TEXT," + // 3: role
                "\"CONTENT\" TEXT," + // 4: content
                "\"CONTENT_VIDEO_ID\" TEXT," + // 5: content_video_id
                "\"CONTENT_VIDEO_PATH\" TEXT," + // 6: content_video_path
                "\"IMG_URL\" TEXT," + // 7: img_url
                "\"LINK\" TEXT," + // 8: link
                "\"TRANSLATE\" TEXT," + // 9: translate
                "\"AI_TYPE\" TEXT," + // 10: ai_type
                "\"CREATED\" INTEGER," + // 11: created
                "\"BACKUP1\" TEXT," + // 12: backup1
                "\"BACKUP2\" TEXT," + // 13: backup2
                "\"BACKUP3\" TEXT," + // 14: backup3
                "\"BACKUP4\" TEXT," + // 15: backup4
                "\"BACKUP5\" TEXT," + // 16: backup5
                "\"BACKUP6\" TEXT," + // 17: backup6
                "\"BACKUP7\" TEXT);"); // 18: backup7
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AI_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AiEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String entity_type = entity.getEntity_type();
        if (entity_type != null) {
            stmt.bindString(2, entity_type);
        }
 
        String content_type = entity.getContent_type();
        if (content_type != null) {
            stmt.bindString(3, content_type);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(4, role);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String content_video_id = entity.getContent_video_id();
        if (content_video_id != null) {
            stmt.bindString(6, content_video_id);
        }
 
        String content_video_path = entity.getContent_video_path();
        if (content_video_path != null) {
            stmt.bindString(7, content_video_path);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(8, img_url);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(9, link);
        }
 
        String translate = entity.getTranslate();
        if (translate != null) {
            stmt.bindString(10, translate);
        }
 
        String ai_type = entity.getAi_type();
        if (ai_type != null) {
            stmt.bindString(11, ai_type);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(12, created);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(13, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(14, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(15, backup3);
        }
 
        String backup4 = entity.getBackup4();
        if (backup4 != null) {
            stmt.bindString(16, backup4);
        }
 
        String backup5 = entity.getBackup5();
        if (backup5 != null) {
            stmt.bindString(17, backup5);
        }
 
        String backup6 = entity.getBackup6();
        if (backup6 != null) {
            stmt.bindString(18, backup6);
        }
 
        String backup7 = entity.getBackup7();
        if (backup7 != null) {
            stmt.bindString(19, backup7);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AiEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String entity_type = entity.getEntity_type();
        if (entity_type != null) {
            stmt.bindString(2, entity_type);
        }
 
        String content_type = entity.getContent_type();
        if (content_type != null) {
            stmt.bindString(3, content_type);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(4, role);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String content_video_id = entity.getContent_video_id();
        if (content_video_id != null) {
            stmt.bindString(6, content_video_id);
        }
 
        String content_video_path = entity.getContent_video_path();
        if (content_video_path != null) {
            stmt.bindString(7, content_video_path);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(8, img_url);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(9, link);
        }
 
        String translate = entity.getTranslate();
        if (translate != null) {
            stmt.bindString(10, translate);
        }
 
        String ai_type = entity.getAi_type();
        if (ai_type != null) {
            stmt.bindString(11, ai_type);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(12, created);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(13, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(14, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(15, backup3);
        }
 
        String backup4 = entity.getBackup4();
        if (backup4 != null) {
            stmt.bindString(16, backup4);
        }
 
        String backup5 = entity.getBackup5();
        if (backup5 != null) {
            stmt.bindString(17, backup5);
        }
 
        String backup6 = entity.getBackup6();
        if (backup6 != null) {
            stmt.bindString(18, backup6);
        }
 
        String backup7 = entity.getBackup7();
        if (backup7 != null) {
            stmt.bindString(19, backup7);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AiEntity readEntity(Cursor cursor, int offset) {
        AiEntity entity = new AiEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // entity_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // role
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content_video_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content_video_path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // img_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // link
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // translate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ai_type
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // created
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // backup1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // backup2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // backup3
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // backup4
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // backup5
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // backup6
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // backup7
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AiEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEntity_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRole(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent_video_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent_video_path(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImg_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTranslate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAi_type(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreated(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setBackup1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBackup2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBackup3(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBackup4(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBackup5(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBackup6(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBackup7(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AiEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AiEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AiEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
